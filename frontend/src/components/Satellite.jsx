// /*
// Auto-generated by: https://github.com/pmndrs/gltfjsx
// Command: npx gltfjsx@6.5.3 satellite.gltf
// Author: arttuGlz (https://sketchfab.com/arttuGlz)
// License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
// Source: https://sketchfab.com/3d-models/satelite-bb4f51e762a94dd9b9bdb348165f2bcd
// Title: Satelite
// */
//
// import React from 'react'
// import { useGLTF } from '@react-three/drei'
//
// export default function Model(props) {
//   const { nodes, materials } = useGLTF('/satellite.gltf')
//   return (
//     <group {...props} dispose={null}>
//       <mesh
//           geometry={nodes.Cube001__0.geometry}
//           material={materials['Scene_-_Root']}
//           position={[1.5, 1.5, 1]}
//           scale={0.4}
//       />
//     </group>
//   )
// }
//
// useGLTF.preload('/satellite.gltf')

import { useRef } from "react";
import { useFrame } from "@react-three/fiber";
import { useGLTF, Line } from "@react-three/drei";

export default function Satellite({ radius = 6, speed = 1 }) {
    const { nodes, materials } = useGLTF('/satellite.gltf');
    const satelliteRef = useRef();

    useFrame(({ clock }) => {
        if (satelliteRef.current) {
            const angle = clock.elapsedTime * speed; // Keep angle increasing over time

            // Set satellite position (circular orbit around Earth)
            satelliteRef.current.position.x = Math.cos(angle) * radius;
            satelliteRef.current.position.z = Math.sin(angle) * radius;
            satelliteRef.current.position.y = 0; // Keep a stable height (no vertical movement)

            // Rotate the satellite to always face the orbit direction
            satelliteRef.current.lookAt(0, 0, 0);
        }
    });

    // Create the orbit path as a visible ring
    const orbitPoints = [];
    for (let i = 0; i <= 100; i++) {
        const angle = (i / 100) * Math.PI * 2; // Full circle
        orbitPoints.push([Math.cos(angle) * radius, 0, Math.sin(angle) * radius]);
    }

    return (
        <>
            {/* Satellite Mesh */}
            <group ref={satelliteRef} dispose={null}>
                <mesh
                    geometry={nodes.Cube001__0.geometry}
                    material={materials['Scene_-_Root']}
                    scale={0.4}
                />
            </group>

            {/* Visible Orbit Path */}
            <Line
                points={orbitPoints}
                color="white"
                lineWidth={2}
            />
        </>
    );
}

useGLTF.preload('/satellite.gltf');